buildscript {

    repositories {

        jcenter()

        maven {

            url = "http://files.minecraftforge.net/maven"
        }

        maven {

            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {

        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.0"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: 'maven-publish' 

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/artifacts.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/minecraft/maven.gradle'

version = "${mod_version}" + getBuildNumber()
group = "${mod_group}"
archivesBaseName = "${mod_name}-${version_minecraft}"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {

    version = "${version_minecraft}-${version_forge}"
    mappings = "${version_mcp}"
    runDir = "run"
	
    replace '@VERSION@', project.version
    replaceIn "${mod_class}.java"
}

//Defines basic patterns for pulling various dependencies.
repositories {

    maven {

        url = "http://maven.mcmoddev.com"
    }
    
    maven {

        url "http://maven.tterrag.com/"
    }
    
    maven {

        url "http://dvs1.progwml6.com/files/maven"
    }
    
    maven {
    
        url "https://maven.blamejared.com"
    }
    
    maven {
    
        url "https://tehnut.info/maven"
    }
	
	maven {
	
        url = "http://maven.covers1624.net"
    }
	
	maven {
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {

    deobfCompile "net.darkhax.bookshelf:Bookshelf-${version_minecraft}:${version_bookshelf}"
    deobfCompile "CraftTweaker2:CraftTweaker2-API:${version_crt}"
    deobfCompile "mcp.mobius.waila:Hwyla:${version_hwyla}"
    deobfCompile "mezz.jei:jei_${version_minecraft}:${version_jei}"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-1.12:${version_top}"
    deobfCompile 'extra-utilities:extrautils2:1.12:1.9.4'
}

processResources {

    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {

        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {

        exclude 'mcmod.info'
    }
}

String getBuildNumber() {

    return System.getenv('BUILD_NUMBER') ? System.getenv('BUILD_NUMBER') : System.getenv('TRAVIS_BUILD_NUMBER') ? System.getenv('TRAVIS_BUILD_NUMBER') : '0';
}

//Prevents incomplete JavaDocs from preventing a build on Java 8.
if (JavaVersion.current().isJava8Compatible()) {

    allprojects {

        tasks.withType(Javadoc) {

            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

curseforge {

    apiKey = System.getenv("curseForgeApiKey") ? System.getenv("curseForgeApiKey") : "0";
	def versions = "${curse_versions}".split(', ')

    project {

        id = "${curse_project}"
        
        releaseType = "alpha";
        changelog = getGitChangelog

        versions.each {

            addGameVersion "${it}"
        }
        
        if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {

            mainArtifact(jar) {

                relations {

                    if (project.hasProperty('curse_requirements')) {
                        def requirements = "${curse_requirements}".split(', ')
                        requirements.each {

                            requiredLibrary "${it}"
                        }
                    }

                    if (project.hasProperty('curse_optionals')) {
                        def optionals = "${curse_optionals}".split(', ')
                        optionals.each {

                            optionalLibrary "${it}"
                        }
                    }
                }
            }
        }
        
        addArtifact(sourcesJar)
        addArtifact(javadocJar)
		addArtifact(deobfJar)
    }
}
